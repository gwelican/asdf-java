#!/usr/bin/env bash

# this is global for error reporting
ASDF_JAVA_ERROR=""

log() {
	# set colors unless ASDF_JAVA_PLAIN is set
	[[ -z $ASDF_JAVA_PLAIN ]] && tput setab $1 && tput setaf 0

	echo -n "░asdf java $2░"

	# set colors unless ASDF_JAVA_PLAIN is set
	[[ -z $ASDF_JAVA_PLAIN ]] && tput sgr0 && tput setaf $1
	echo " ${@:3}"

	# unset colors
	tput sgr0
}

log_info() {
	log 2 ':)' "$@"
}

log_warning() {
	log 3 ':o' "$@"
}

get_arch() {
	case "$(uname -m)" in
    x86_64)
        echo x64
    ;;
	esac
}
get_os() {
	case "$(uname -s)" in
    Linux)
        echo linux
    ;;
    Darwin)
        echo mac
    ;;
esac
}

log_error() {
	log 1 ':(' "$@"
}

# Download the java source from Oracle or OpenJDK, copy files and cleanup.
install_java() {
	local versionstr=$1
	local destdir=$2

	versionstr=${versionstr/jdk-8u/jdk-8+}

	IFS="-" read jvm_version java_version<<<"$versionstr"
	[[ -z "$ASDF_JAVA_ERROR" ]] || return

	get_java $jvm_version $java_version $destdir
	[[ -z "$ASDF_JAVA_ERROR" ]] || return
}

# Download java from Oracle.
get_java() {
	local jvm_version=$1
	local java_version=$2
	local destdir=$3

	local releases=$()

	local binary_details=$(curl -s "https://api.adoptopenjdk.net/v2/info/releases/openjdk${jvm_version##jdk}?release=latest&openjdk_impl=hotspot&os=$(get_os)&type=jdk&arch=$(get_arch)&heap_size=normal" | awk '
		match($0, /"binary_link"\s*:\s*"(.*)"/, m) { binary_link=m[1] }
		match($0, /"binary_name"\s*:\s*"(.*)"/, m) { binary_name=m[1] }
		match($0, /"openjdk_version"\s*:\s*"(.*)"/, m) && m[1] != "'$java_version'" { binary_link=""; binary_name="" }
		match($0, /"updated_at"\s*:\s*"(.*)"/, m) && binary_link != "" { printf("%s|%s", binary_link, binary_name) }
	')

	IFS="|" read binary_link binary_name <<<"$binary_details"
	
	log_info downloading $url

	curl -fLC - \
		--progress-bar \
		--retry 3 --retry-delay 3 \
		-o $destdir/$binary_name $binary_link

	cd $destdir; {
		tar -xzf $binary_name
		[[ $? == 0 ]] || ASDF_JAVA_ERROR="expanding java dist"
		rm $binary_name

		local pkg=$(echo * | grep jdk)
		echo $pkg
		if [ -d $pkg/Contents/Home ]; then
			mv $pkg/Contents/Home/* .
		else
			mv $pkg/* .
		fi
		rm -rf ./$pkg
	}; cd $origin

	[[ $? != 0 ]] && ASDF_JAVA_ERROR="downloading java dist"
}

# Unpacks all kinds of sources.
unpack_java() {
	local version=$1
	local jvm=$2
	local destdir=$3

	log_info expanding java dist

	local origin=$(pwd)

	cd $destdir; {
		tar -xzf $file
		[[ $? == 0 ]] || ASDF_JAVA_ERROR="expanding java dist"
		rm $file

		local pkg=$(echo * | grep jdk)
		echo $pkg
		if [ -d $pkg/Contents/Home ]; then
			mv $pkg/Contents/Home/* .
		else
			mv $pkg/* .
		fi
		rmdir $pkg
	}; cd $origin

}

#
# MAIN
#
install_java "$ASDF_INSTALL_VERSION" "$ASDF_INSTALL_PATH"

if [[ -z "$ASDF_JAVA_ERROR" ]]; then
	log_info "$ASDF_INSTALL_VERSION was installed successfully"
else
	log_error "asdf java failed. $ASDF_JAVA_ERROR"
fi

unset ASDF_JAVA_ERROR
